System Architecture
The Poppin app will be built using the following technologies:

Frontend: HTML, CSS, JavaScript
Backend: Node.js, Express.js
Database: PostgreSQL
The frontend and backend will communicate via RESTful API endpoints. The backend will be responsible for querying the database, while the frontend will be responsible for displaying the data and sending user input to the backend.

The system architecture will be divided into two main components: the Club side and the User side. Each component will have its own set of forms and functionality.

Club Side
The Club side of the app will consist of two forms:

Add Section Form
This form will allow the club to add a new section. It will include the following fields:

Number of sections
Cost per section
Start time
End time
When the form is submitted, the data will be sent to the server via a POST request. The server will then insert the data into the database.

View Section Form
This form will allow the club to view the number of people who have put in for a section and whether they have paid or not. It will include the following fields:

Section ID
Number of people
Paid or not
When the form is submitted, the server will query the database for the relevant information and return it to the frontend.

User Side
The User side of the app will consist of two forms:

Party Size Form
This form will allow the user to input the size of their party and whether they have paid or not. It will include the following fields:

Party size
Paid or not
When the form is submitted, the data will be sent to the server via a POST request. The server will then insert the data into the database.

Club Info Form
This form will display the name and location of the club, as well as the cost for the night. It will include the following fields:

Club name
Club location
Cost for the night
When the form is submitted, the server will query the database for the relevant information and return it to the frontend.

Beta Version
For the beta version of the app, a carousel-style interface will be used to display various clubs. When the user clicks on a club, they will be taken to an info page that displays the club's name, location, and cost for the night.

Database Schema
The following tables will be created in the PostgreSQL database:

Sections Table
section_id (primary key)
num_sections
cost_per_section
start_time
end_time
Reservations Table
reservation_id (primary key)
section_id (foreign key referencing Sections table)
party_size
paid_status
Clubs Table
club_id (primary key)
club_name
club_location
cost_for_night
Conclusion
That's the basic design for the Poppin app. Of course, there may be additional features and functionality that you want to add later, but this should give you a good starting point.


** extra credit add a functionality on there for uploading images that will be the pic for now we will do it but I wanty it to be where the club users themselves can put it on there

foreign keys are used to keep tables connecteed you use like
FOREIGN KEY (club_id) REFRENCES clubs(club_id) if club id is from another table

    key fetures-
    
- you can sort it out by hitting a button which returns the data in a sorted fashion
- I should add a date column to both and a function that erasses the data after a certain date
-can work for mobile.
- if a section gets purchased it reduces the numbers of section in the database for each club
- a club or user can remove themselves from the database



- 4 make logo
 3- carousel for data
2 working with the package to upload pics

- 1   figure how to render and postsql on line try that blueprony shit for render yaml 
\
disclaimer

flaw right now how can we vewrify the people on the club side are really ownders or is it shop at your own rsik and we assume no liability we just connect two parties people must do theyr own research.





-
const list = document.getElementById("list");
const button = document.getElementById("btn");

const nodes = list.childNodes // this gives us a list of the nodes  we need this to sort

button.addEventListener("click", () => {

    const arr = Array.from(nodes) // we made an array of the nodes from the list

    const sy = arr.filter(info =>
        info.nodeType == 1 // this is to get all trhe element nodes because the one
    )//with filter its not a block

    //okay now we are about to poupulate an array with th inner of the children
    const life = []
    sy.forEach(
        li => {
            life.push(li.innerHTML)
        }
    );
    const sorted = life.sort()
    const norted = sorted.map(num => {
        return parseInt(num)
    });
    const chan = norted.sort((a, b) => {
        return a - b;
    });
    //okay now we need a list of the li
    const stuffin = list.getElementsByTagName("li")// this gives all the lis with the tag and inside the list
    for (let i = 0; i < stuffin.length; i++) {
        stuffin[i].innerHTML = chan[i]
    }
})


// //chat gpt quicker
// const list = document.getElementById("list");
// const button = document.getElementById("btn");

// button.addEventListener("click", () => {
//     const nodes = Array.from(list.children); // get an array of child elements
//     const values = nodes.map(node => parseInt(node.innerHTML)); // extract values as integers
//     values.sort((a, b) => a - b); // sort values numerically
//     nodes.forEach((node, index) => node.innerHTML = values[index]); // update innerHTML of each node with sorted value
// });
